# imports and requirements
# kivy 2.0.0 - requires atleast kivy 2.0.0 to run sucessfully
# import platform kivy.utils.platform - to be able to detect the platform that the app is running on
#(android, ios, windows, linux, macos, etc)
# import rgba kivy.utils.get_color_from_hex - function to be able to convert colors in hex code to the rgba colorspace


#:kivy 2.0.0
#:import platform kivy.utils.platform
#:import rgba kivy.utils.get_color_from_hex
WindowManager:
    FilePickerScreen:
    BluetoothController:
    ObstacleDetection:



#: set dropdownOption1 "OCTOPAS"
#: set dropdownOption2 "OCTOPAS ARM Controller"
#: set dropdownOption3 "ORCAS"

# FilePickerScreen is the screen that allows you to pick an image, and process it. this is where the analytics of the
#image are shown.
<FilePickerScreen>:
    name: "FPScreen"
    id: FilePicker
    __safe_id: [processingDropdown.__self__]
    FloatLayout:
        id: mainLayout
        ImageButton:
            id: menuButton
            size_hint_x: None
            width: self.parent.width/15
            pos_hint:{'top': 1.44,'x':.03 }
            source: "Menu.png"
            allow_stretch: True
            keep_ratio: True
            on_release: MenuOilSpillButton.background_color = rgba("#005c7a");
            on_release: MenuBluetoothControllerButton.background_color = rgba("#005c7a");
            on_release: ObstacleDetectionButton.background_color = rgba("#005c7a");

        # makes the dropdown widget where the user can choose what type of processing they want
        DropDown:
            id: processingDropdown
            auto_width: False
            width: mainLayout.width/4
            pos_hint:{'top': .9,'right':0.27}

            # creates the first button in the dropdown menu. users can click this menu for oil spil identification
            Button:
                size_hint_y: None
                id: MenuOilSpillButton
                text: dropdownOption1
                height: root.height/15
                font_size: ((root.height + root.width) / 60) * 0.7
                background_color: 0,0,0,0


            # creates an empty widget for spacing between the buttons; this is has no functional purpose
            Widget:
                size_hint_y: None
                height: root.height/150


            # creates the second button in the dropdown menu. users can click this menu for the
            Button:
                size_hint_y: None
                id: MenuBluetoothControllerButton
                text: dropdownOption2
                font_size: ((root.height + root.width) / 60) * 0.7
                height: root.height/15
                on_release:
                    processingDropdown.dismiss()
                    root.manager.transition.direction =  "right"
                    root.manager.current = "BTController"

                background_color: 0,0,0,0
            Widget:
                size_hint_y: None
                height: root.height/150


            # creates the second button in the dropdown menu. users can click this menu for the
            Button:
                size_hint_y: None
                id: ObstacleDetectionButton
                text: dropdownOption3
                font_size: ((root.height + root.width) / 60) * 0.7
                height: root.height/15
                background_color: 0,0,0,0
                on_release:
                    processingDropdown.dismiss()
                    root.manager.transition.direction =  "down"
                    root.manager.current = "ObstacleDT"

        Label:
            id: timeLabel
            text: 'Time: '
            color: rgba("#005c7a")
            halign: 'center'
            size_hint_x: None
            height: self.size[1]
            pos_hint:{'top': 1.43,'x':.8 }
            font_size: (root.height / 15) * .8


        # making an image widget, and the source of the widget is set to the logo file.
        Image:

            id: logo
            canvas.after:
                Color:
                    rgba: rgba('#005c7a')
                Line:
                    width: 2
                    points: self.center_x-mainLayout.width/2, logo.center_y - logo.parent.width/5 / logo.image_ratio, self.center_x+mainLayout.width/2+100, logo.center_y - logo.parent.width/5 / logo.image_ratio
            source: 'ENVIRO.png'
            size_hint_x: None
            width: self.parent.width/4.6
            pos_hint:{'top': 1.43,'right':.6}
            allow_stretch: True
            keep_ratio: True

        # making an image widget, the source of the widget is set to the Icon file
        Image:
            id: icon
            canvas.after:
                Color:
                    rgba: rgba('#005c7a')
                Line:
                    width: 2
                    points: logo.center_x-(logo.width - icon.width) , logo.center_y - logo.parent.width/5 / logo.image_ratio, logo.center_x-(logo.width-icon.width), logo.center_y + logo.parent.width/5 / logo.image_ratio + 25
                Line:
                    width: 2
                    points: logo.center_x + (logo.width), logo.center_y - logo.parent.width/5 / logo.image_ratio, logo.center_x + logo.width, logo.center_y + logo.parent.width/5 / logo.image_ratio + 25
            source: 'Icon.ico'
            size_hint_x: None
            width: self.parent.width/12
            allow_stretch: True
            keep_ratio: True
            pos_hint:{'top': 1.44,'right':.68}


        Label:
            id: originalImageLabel
            text: 'Oil Spill \n Drone Image: '
            color: rgba("#005c7a")
            halign: 'center'
            size_hint_x: None
            height: self.size[1]
            pos_hint:{'top': 1.25,'right':.7 }
            font_size: (root.height / 15) * 0.5
        Label:
            id: clusteredImageLabel
            text: '1. Clustered Image'
            color: rgba("#005c7a")
            halign: 'center'
            size_hint_x: None
            height: self.size[1]
            pos_hint:{'top': 1.1,'right':.67 }
            font_size: (root.height / 23) * 0.5
        Label:
            id: binaryImageLabel
            text: '2. Grayscale Image'
            color: rgba("#005c7a")
            halign: 'center'
            size_hint_x: None
            height: self.size[1]
            pos_hint:{'top': 1.1,'right':.82 }
            font_size: (root.height / 23) * 0.5
        Label:
            id: clusteredImageLabel
            text: '3. Binary Image'
            color: rgba("#005c7a")
            halign: 'center'
            size_hint_x: None
            height: self.size[1]
            pos_hint:{'top': 1.1,'right':0.97 }
            font_size: (root.height / 23) * 0.5
        Label:
            id: processedImageLabel
            text: 'Processed Image: '
            color: rgba("#005c7a")
            halign: 'center'
            size_hint_x: None
            height: self.size[1]
            pos_hint:{'top': .89,'right':.7 }
            font_size: (root.height / 15) * 0.5

        # making an image widget, the source of the widget is
        Image:
            id: originalImage
            source: 'drone.png'
            keep_ratio: True
            allow_stretch: True
            size_hint_x: None
            width: self.parent.width/6 if self.source == "drone.png" else self.parent.width/4
            pos_hint:{'top': 1.25,'right':1}

        Image:
            id: binaryImage
            source: 'blackandwhite.png'
            keep_ratio: True
            allow_stretch: True
            size_hint_x: None
            width: self.parent.width/6.5 if self.source == "blackandwhite.png" else self.parent.width/7
            pos_hint:{'top': 1,'right':1}
        Image:
            id: grayscaleImage
            source: 'grayscale.png'
            keep_ratio: True
            allow_stretch: True
            size_hint_x: None
            width: self.parent.width/7.5 if self.source == "grayscale.png" else self.parent.width/7
            pos_hint:{'top': 1,'right':.85}
        Image:
            id: clusteredImage

            source: 'clustered.png'
            keep_ratio: True
            allow_stretch: True
            size_hint_x: None
            width: self.parent.width/7 if self.source == "clustered.png" else self.parent.width/7
            pos_hint:{'top': 1,'right':.7}

        # creates an image widget to contain the image to be processed.  by default ths source is set to the
        # 'PleasePickAnImage.png'
        Image:
            id: processedImage
            source: 'processed.png'
            keep_ratio: True
            allow_stretch: True
            size_hint_x: None
            width: self.parent.width/6 if self.source == "processed.png" else self.parent.width/4
            pos_hint:{'top': .77,'right':1}
        Image:
            id: imageLegend
            source: 'imageLegend.png'
            keep_ratio: True
            allow_stretch: True
            size_hint_x: None
            width: self.parent.width/4.5
            pos_hint:{'top': .76,'right':.74}


        FileChooserListView:
            id: filechooser

            canvas.after:
                Color:
                    rgba: rgba('#005c7a')
                Line:
                    width: 2
                    rectangle: self.x, self.y, self.width, self.height-25
                Line:
                    width: 2
                    points: self.center_x - self.width + self.x, self.center_y - self.height/2, self.center_x + self.width - self.x, self.center_y-self.height/2
#                    points: self.center_x-self.width - self.x , self.center_y - self.height/2, self.center_x + self.width - self.x, self.center_y-self.height/2
            size_hint_x: None
            width: self.parent.width/3
            size_hint_y: .35
            rootpath: '/storage/emulated/0/' if platform == 'android' else '/'
            on_selection: FilePicker.selected(filechooser.selection)
            border: (10,10,10,10)
            pos_hint:{'top': .85 ,'right':.41    }
        Label:
            id: FileChooserTitle
            text: 'Please Pick an Image!'
            color: rgba("#005c7a")
            halign: 'center'
            size_hint_x: None
            height: self.size[1]
            pos_hint:{'top': 1.35,'right':.3 }
            font_size: (root.height / 17) * 0.5

#            # creates an image widget to contain the image to be processed.  by default ths source is set to the
#            # 'PleasePickAnImage.png'
#            Image:
#                id: OilImage
#                source: 'PleasePickAnImage.png'
#                keep_ratio: True
#                allow_stretch: True
#                width: self.parent.width
#                height: self.parent.width/self.image_ratio

        # creates a box layout to contain all of the labels, for the analytics.
        BoxLayout:
            id: analysisOverlay
            orientation: 'vertical'
            background_color: 'white'
            size_hint_y: None
            spacing:  root.height/25
            pos_hint:{'top': .36,'right':.67}

            # label for the title, this label is what shows the error messages, what file is chosen, etc.
            Label:
                id: title
                text: ''
                color: rgba("#005c7a")
                halign: 'left'
                size_hint_x: None
                pos_hint:{'top': 1.2 ,'right':.63}
                height: self.size[1]
                font_size: (root.height / 10) * 0.4

            # creates a label to display the processing time.
            Label:
                id: processTime
                text: ''
                color: rgba("#005c7a")
                halign: 'left'
                size_hint_x: None
                pos_hint:{'top': 1.2 ,'right':.63}
                height: self.size[1]
                font_size: (root.height / 18) * 0.4


            # creates a label to area of the water
            Label:
                id: areaOfWater
                text: ''
                color: rgba("#005c7a")
                halign: 'left'
                size_hint_x: None
                pos_hint:{'top': 1.2 ,'right':.63}
                height: self.size[1]
                font_size: (root.height / 18) * 0.4

            # creates a label to display the area of the oil.
            Label:
                id: areaOfOil
                text: ''
                color: rgba("#005c7a")
                halign: 'left'
                size_hint_x: None
                pos_hint:{'top': 1.15 ,'right':.63}
                height: self.size[1]
                font_size: (root.height / 18) * 0.4

            # creates a label to display the area of the oil.
            Label:
                id: percentOfOil
                text: ''
                color: rgba("#005c7a")
                halign: 'left'
                size_hint_x: None
                pos_hint:{'top': 1.1 ,'right':.63}
                height: self.size[1]
                font_size: (root.height / 18) * 0.4

            # creates a label to display the length of the boom shown.
            Label:
                id: lengthOfBoom
                text: ''
                color: rgba("#005c7a")
                halign: 'left'
                size_hint_x: None
                pos_hint:{'top': 1.3 ,'right':.63}
                height: self.size[1]
                font_size: (root.height / 18) * 0.4

        # creates a box layout to contain all of the buttons.
        BoxLayout:
            id: buttonLayout
            background_color: 'white'
            orientation: 'horizontal'
            size_hint_y: None
            height: 100 if 100 > root.height/8 else root.height/8
            padding: 10
            spacing: 10
            canvas.after:
                Color:
                    rgba: rgba('#005c7a')
                Line:
                    width: 2
                    points: (mainLayout.center_x) , (mainLayout.center_y-mainLayout.height/2 + buttonLayout.height), mainLayout.center_x, logo.center_y - logo.parent.width/5 / logo.image_ratio
            # creates the Pick an Image Button. this button calls the FilePicker.open function, every time the
            # button is released.  the inputs for the function are filechooser.path, which provides the path of the
            # file chosen. the 2nd input is the filechooser.selection, which essentially is the name of the file.

            Button:
                id: pickButton
                text: "Pick an Image!"
                on_release: FilePicker.open(filechooser.path, filechooser.selection)
                border: 15,15,15,15
                font_size: ((root.height + root.width) / 30) * 0.7
                size_hint: .3, 1
                size: 75, 100
                size_hint_max_y: .4
                orientation: 'vertical'

            # creates the Process Button. this button calls the FilePicker.process function, every time the
            #button is released.
            Button:
                id: processButton
                text: "Process!"
                border: 15,15,15,15
                size_hint_max_y: .4
                font_size: ((root.height + root.width) / 30) * 0.7
                size_hint: .3, 1
                orientation: 'vertical'
                on_release: FilePicker.process()


            # creates the clear button, this button calls the FilePicker.clear function every time the button is released.
            Button:
                id: clearButton
                text: "Clear!"
                border: 15,15,15,15
                font_size: ((root.height + root.width) / 30) * 0.7
                size_hint: .3, 1
                size: 75, 100
                size_hint_max_y: .4
                orientation: 'vertical'
                on_release: FilePicker.clear()


# creates a second screen that allows you to see the control the OCTOPAS arm, and lets you  of the data; for future enhancements
<BluetoothController>:
    id: bluetoothController
    name: "BTController"

    # this makes it so that the dropdown instance is never lost. if this is not here, the dropdown will be lost, and
    # the drop down will become a weakly referenced object.
    __safe_id: [processingDropdown.__self__]

    FloatLayout:
        id: mainLayout
        ImageButton:
            id: menuButton
            size_hint_x: None
            width: self.parent.width/15
            pos_hint:{'top': 1.44,'x':.03 }
            source: "Menu.png"
            allow_stretch: True
            keep_ratio: True
            on_release: MenuOilSpillButton.background_color = rgba("#005c7a")
            on_release: MenuBluetoothControllerButton.background_color = rgba("#005c7a")
            on_release: ObstacleDetectionButton.background_color = rgba("#005c7a")
         # making an image widget, and the source of the widget is set to the logo file.
        Image:

            id: logo
            canvas.after:
                Color:
                    rgba: rgba('#005c7a')
                Line:
                    width: 2
                    points: self.center_x-mainLayout.width/2, logo.center_y - logo.parent.width/5 / logo.image_ratio, self.center_x+mainLayout.width/2+100, logo.center_y - logo.parent.width/5 / logo.image_ratio
            source: 'ENVIRO.png'
            size_hint_x: None
            width: self.parent.width/4.6
            pos_hint:{'top': 1.43,'right':.6}
            allow_stretch: True
            keep_ratio: True

        # making an image widget, the source of the widget is set to the Icon file
        Image:
            id: icon
            canvas.after:
                Color:
                    rgba: rgba('#005c7a')
                Line:
                    width: 2
                    points: logo.center_x-(logo.width - icon.width) , logo.center_y - logo.parent.width/5 / logo.image_ratio, logo.center_x-(logo.width-icon.width), logo.center_y + logo.parent.width/5 / logo.image_ratio + 25
                Line:
                    width: 2
                    points: logo.center_x + (logo.width), logo.center_y - logo.parent.width/5 / logo.image_ratio, logo.center_x + logo.width, logo.center_y + logo.parent.width/5 / logo.image_ratio + 25
            source: 'Icon.ico'
            size_hint_x: None
            width: self.parent.width/12
            allow_stretch: True
            keep_ratio: True
            pos_hint:{'top': 1.44,'right':.68}

        Label:
            id: timeLabel
            text: 'Time: '
            color: rgba("#005c7a")
            halign: 'center'
            size_hint_x: None
            height: self.size[1]
            pos_hint:{'top': 1.43,'x':.8 }
            font_size: (root.height / 15) * .8

        Image:
            id: Graph
            source: ''
            size_hint_x: None
            width: self.parent.width/2
            allow_stretch: True
            keep_ratio: True
            pos_hint:{'top': .94,'right':.85}

        # makes the dropdown widget where the user can choose what type of processing they want
        DropDown:
            id: processingDropdown
            auto_width: False
            width: mainLayout.width/4
            pos_hint:{'top': .9,'right':0.27}

            # creates the first button in the dropdown menu. users can click this menu for oil spil identification
            Button:
                size_hint_y: None
                id: MenuOilSpillButton
                text: dropdownOption1
                height: root.height/15
                font_size: ((root.height + root.width) / 60) * 0.7
                on_release:
                    root.manager.transition.direction =  "left"
                    root.manager.current = "FPScreen"
                    processingDropdown.dismiss()
                background_color: 0,0,0,0

            # creates an empty widget for spacing between the buttons; this is has no functional purpose
            Widget:
                size_hint_y: None
                height: root.height/150


            # creates the second button in the dropdown menu. users can click this menu for the
            Button:
                size_hint_y: None
                id: MenuBluetoothControllerButton
                text: dropdownOption2
                font_size: ((root.height + root.width) / 60) * 0.7
                height: root.height/15
                background_color: 0,0,0,0

                 # creates an empty widget for spacing between the buttons; this is has no functional purpose
            Widget:
                size_hint_y: None
                height: root.height/150


            # creates the second button in the dropdown menu. users can click this menu for the
            Button:
                size_hint_y: None
                id: ObstacleDetectionButton
                text: dropdownOption3
                font_size: ((root.height + root.width) / 60) * 0.7
                height: root.height/15
                background_color: 0,0,0,0
                on_release:
                    processingDropdown.dismiss()
                    root.manager.transition.direction =  "down"
                    root.manager.current = "ObstacleDT"





        BoxLayout:
            orientation: 'vertical'
            size_hint_y: None
            height: root.height/1.5
            size_hint_x: None
            width: root.width/3
            pos_hint:{'top': .8,'right':.35}
            spacing: 10
            padding: 10
            Label:
                id: messageLogTitle
                text: 'Please Send a Message'
                color: rgba("#005c7a")
                halign: 'center'
                size_hint_y: None
                text_size: self.parent.width, None
                height: self.texture_size[1]
                font_size: (root.height / 15) * 0.5
            ScrollView:
                canvas.after:
                    Color:
                        rgba: rgba('#005c7a')
                    Line:
                        width: 2
                        rectangle: self.center_x/2+self.x/2, self.y, self.width/2, self.height

                id: scrollView
                scroll_type: ['bars', 'content']
                do_scroll_x: False
                Label:
                    id: messageLog
                    text: ''
                    color: rgba("#005c7a")
                    halign: 'left'
                    size_hint_y: None
                    text_size: self.parent.width/2, None
                    height: self.texture_size[1]
                    font_size: (root.height / 18) * 0.5


        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: 20 if 20 > root.height/10 else root.height/10
            spacing:  root.width/65
            padding: 10
            TextInput:
                id: bluetoothInput
                size_hint: None, None
                hint_text: "Enter Time to Deploy Sorbents (seconds)"
                font_size: 30
                width: self.parent.width  - self.parent.width/9
                height: self.parent.height
                background_color: (0,0,0,0)
                multiline: False
                color: rgba("#005c7a")
                cursor_color: rgba("#005c7a")
                canvas.after:
                    Color:
                        rgba: rgba('#005c7a')
                    Line:
                        width: 2
                        rectangle: self.x, self.y, self.width, self.height
            ImageButton:
                id: sendButton
                allow_stretch: True
                keep_ratio: True
                source: "Send.png"
                size_hint_x: None
                width: self.parent.width/15
                pos_hint:{'top': 1.19,'x':-174.0 }
                on_release:
                    bluetoothController.sendMessage(bluetoothInput.text)

<ObstacleDetection>:
    id: ObstacleDT
    name: 'ObstacleDT'
    __safe_id: [processingDropdown.__self__]

    FloatLayout:
        id: mainLayout
        ImageButton:
            id: menuButton
            size_hint_x: None
            width: self.parent.width/15
            pos_hint:{'top': 1.44,'x':.03 }
            source: "Menu.png"
            allow_stretch: True
            keep_ratio: True
            on_release: MenuOilSpillButton.background_color = rgba("#005c7a")
            on_release: MenuBluetoothControllerButton.background_color = rgba("#005c7a")
            on_release: ObstacleDetectionButton.background_color = rgba("#005c7a")
         # making an image widget, and the source of the widget is set to the logo file.
        Image:

            id: logo
            canvas.after:
                Color:
                    rgba: rgba('#005c7a')
                Line:
                    width: 2
                    points: self.center_x-mainLayout.width/2, logo.center_y - logo.parent.width/5 / logo.image_ratio, self.center_x+mainLayout.width/2+100, logo.center_y - logo.parent.width/5 / logo.image_ratio
            source: 'ENVIRO.png'
            size_hint_x: None
            width: self.parent.width/4.6
            pos_hint:{'top': 1.43,'right':.6}
            allow_stretch: True
            keep_ratio: True

        # making an image widget, the source of the widget is set to the Icon file
        Image:
            id: icon
            canvas.after:
                Color:
                    rgba: rgba('#005c7a')
                Line:
                    width: 2
                    points: logo.center_x-(logo.width - icon.width) , logo.center_y - logo.parent.width/5 / logo.image_ratio, logo.center_x-(logo.width-icon.width), logo.center_y + logo.parent.width/5 / logo.image_ratio + 25
                Line:
                    width: 2
                    points: logo.center_x + (logo.width), logo.center_y - logo.parent.width/5 / logo.image_ratio, logo.center_x + logo.width, logo.center_y + logo.parent.width/5 / logo.image_ratio + 25
            source: 'Icon.ico'
            size_hint_x: None
            width: self.parent.width/12
            allow_stretch: True
            keep_ratio: True
            pos_hint:{'top': 1.44,'right':.68}

        Label:
            id: timeLabel
            text: 'Time: '
            color: rgba("#005c7a")
            halign: 'center'
            size_hint_x: None
            height: self.size[1]
            pos_hint:{'top': 1.43,'x':.8 }
            font_size: (root.height / 15) * .8 # makes the dropdown widget where the user can choose what type of processing they want
        DropDown:
            id: processingDropdown
            auto_width: False
            width: mainLayout.width/4
            pos_hint:{'top': .9,'right':0.27}

            # creates the first button in the dropdown menu. users can click this menu for oil spil identification
            Button:
                size_hint_y: None
                id: MenuOilSpillButton
                text: dropdownOption1
                height: root.height/15
                font_size: ((root.height + root.width) / 60) * 0.7
                on_release:
                    root.manager.transition.direction =  "up"
                    root.manager.current = "FPScreen"
                    processingDropdown.dismiss()
                background_color: 0,0,0,0

            # creates an empty widget for spacing between the buttons; this is has no functional purpose
            Widget:
                size_hint_y: None
                height: root.height/150


            # creates the second button in the dropdown menu. users can click this menu for the
            Button:
                size_hint_y: None
                id: MenuBluetoothControllerButton
                text: dropdownOption2
                font_size: ((root.height + root.width) / 60) * 0.7
                height: root.height/15
                background_color: 0,0,0,0
                on_release:
                    root.manager.transition.direction =  "up"
                    root.manager.current = "BTController"
                    processingDropdown.dismiss()

                 # creates an empty widget for spacing between the buttons; this is has no functional purpose
            Widget:
                size_hint_y: None
                height: root.height/150


            # creates the second button in the dropdown menu. users can click this menu for the
            Button:
                size_hint_y: None
                id: dropdownOption3
                text: 'Obstacle Detection'
                font_size: ((root.height + root.width) / 60) * 0.7
                height: root.height/15
                background_color: 0,0,0,0


        FileChooserListView:
            id: filechooser

            canvas.after:
                Color:
                    rgba: rgba('#005c7a')
                Line:
                    width: 2
                    rectangle: self.x, self.y, self.width, self.height-25
                Line:
                    width: 2
                    points: self.center_x - self.width + self.x, self.center_y - self.height/2, self.center_x + self.width - self.x, self.center_y-self.height/2
#                    points: self.center_x-self.width - self.x , self.center_y - self.height/2, self.center_x + self.width - self.x, self.center_y-self.height/2
            size_hint_x: None
            width: self.parent.width/3
            size_hint_y: .35
            rootpath: '/storage/emulated/0/' if platform == 'android' else '/'
            on_selection: ObstacleDT.selected(filechooser.selection)
            border: (10,10,10,10)
            pos_hint:{'top': .85 ,'right':.41    }

        Image:
            id: processedImage
            source: 'drone.png'
            keep_ratio: True
            allow_stretch: True
            size_hint_x: None
            width: self.parent.width/3 if self.source == "drone.png" else self.parent.width/2
            pos_hint:{'top': 1.1,'right':1}
        Label:
            id: FileChooserTitle
            text: 'Please Pick an Image!'
            color: rgba("#005c7a")
            halign: 'center'
            size_hint_x: None
            height: self.size[1]
            pos_hint:{'top': 1.35,'right':.3 }
            font_size: (root.height / 17) * 0.5
        # creates a box layout to contain all of the buttons.
        BoxLayout:
            id: buttonLayout
            background_color: 'white'
            orientation: 'horizontal'
            size_hint_y: None
            height: 100 if 100 > root.height/8 else root.height/8
            padding: 10
            spacing: 10
            canvas.after:
                Color:
                    rgba: rgba('#005c7a')
                Line:
                    width: 2
                    points: (mainLayout.center_x) , (mainLayout.center_y-mainLayout.height/2 + buttonLayout.height), mainLayout.center_x, logo.center_y - logo.parent.width/5 / logo.image_ratio
            # creates the Pick an Image Button. this button calls the FilePicker.open function, every time the
            # button is released.  the inputs for the function are filechooser.path, which provides the path of the
            # file chosen. the 2nd input is the filechooser.selection, which essentially is the name of the file.

            Button:
                id: pickButton
                text: "Pick an image!"
                on_release: ObstacleDT.open(filechooser.path, filechooser.selection)
                border: 15,15,15,15
                font_size: ((root.height + root.width) / 30) * 0.7
                size_hint: .3, 1
                size: 75, 100
                size_hint_max_y: .4
                orientation: 'vertical'

            # creates the Process Button. this button calls the FilePicker.process function, every time the
            #button is released.
            Button:
                id: processButton
                text: "Find Obstacles!"
                border: 15,15,15,15
                size_hint_max_y: .4
                font_size: ((root.height + root.width) / 30) * 0.7
                size_hint: .3, 1
                orientation: 'vertical'
                on_release: ObstacleDT.process()


#            # creates the clear button, this button calls the FilePicker.clear function every time the button is released.
#            Button:
#                id: clearButton
#                text: "Clear!"
#                border: 15,15,15,15
#                font_size: ((root.height + root.width) / 30) * 0.7
#                size_hint: .3, 1
#                size: 75, 100
#                size_hint_max_y: .4
#                orientation: 'vertical'
#                on_release: ObstacleDT.clear()